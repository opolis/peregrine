module Contract.DSGroup
    exposing
        ( actionCount
        , Action
        , actions
        , actionsDecoder
        , calldata
        , confirm
        , confirmations
        , confirmed
        , confirmedBy
        , deadline
        , deposit
        , expired
        , GetActionStatu
        , getActionStatus
        , getActionStatusDecoder
        , GetInfo
        , getInfo
        , getInfoDecoder
        , isMember
        , memberCount
        , members
        , propose
        , quorum
        , target
        , trigger
        , triggered
        , value
        , window
        , Confirmed
        , confirmedEvent
        , confirmedDecoder
          -- , LogNote
          -- , logNoteEvent
          -- , logNoteDecoder
        , Proposed
        , proposedEvent
        , proposedDecoder
        , Triggered
        , triggeredEvent
        , triggeredDecoder
        )

import BigInt exposing (BigInt)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (custom, decode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Abi.Decode as AbiDecode exposing (abiDecode, andMap, toElmDecoder, topic, data)
import Abi.Encode as AbiEncode exposing (Encoding(..), abiEncode)
import Hex


{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator

-}


{-| "actionCount()" function
-}
actionCount : Address -> Call BigInt
actionCount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "actionCount()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "actions(uint256)" function
-}
type alias Action =
    { target : Address
    , calldata : String
    , value : BigInt
    , confirmations : BigInt
    , deadline : BigInt
    , triggered : Bool
    }


actions : Address -> BigInt -> Call Action
actions contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "actions(uint256)" [ AbiEncode.uint a ]
    , nonce = Nothing
    , decoder = actionsDecoder
    }


actionsDecoder : Decoder Action
actionsDecoder =
    abiDecode Action
        |> andMap AbiDecode.address
        |> andMap AbiDecode.dynamicBytes
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.bool
        |> toElmDecoder


{-| "calldata(uint256)" function
-}
calldata : Address -> BigInt -> Call String
calldata contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "calldata(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.dynamicBytes
    }


{-| "confirm(uint256)" function
-}
confirm : Address -> BigInt -> Call ()
confirm contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "confirm(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "confirmations(uint256)" function
-}
confirmations : Address -> BigInt -> Call BigInt
confirmations contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "confirmations(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "confirmed(uint256)" function
-}
confirmed : Address -> BigInt -> Call Bool
confirmed contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "confirmed(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "confirmedBy(uint256,address)" function
-}
confirmedBy : Address -> BigInt -> Address -> Call Bool
confirmedBy contractAddress a b =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "confirmedBy(uint256,address)" [ AbiEncode.uint a, AbiEncode.address b ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "deadline(uint256)" function
-}
deadline : Address -> BigInt -> Call BigInt
deadline contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "deadline(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "deposit()" function
-}
deposit : Address -> Call ()
deposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "deposit()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "expired(uint256)" function
-}
expired : Address -> BigInt -> Call Bool
expired contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "expired(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "getActionStatus(uint256)" function
-}
type alias GetActionStatu =
    { confirmations : BigInt
    , deadline : BigInt
    , triggered : Bool
    , target : Address
    , value : BigInt
    }


getActionStatus : Address -> BigInt -> Call GetActionStatu
getActionStatus contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getActionStatus(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = getActionStatusDecoder
    }


getActionStatusDecoder : Decoder GetActionStatu
getActionStatusDecoder =
    abiDecode GetActionStatu
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.bool
        |> andMap AbiDecode.address
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "getInfo()" function
-}
type alias GetInfo =
    { quorum_ : BigInt
    , memberCount : BigInt
    , window_ : BigInt
    , actionCount_ : BigInt
    }


getInfo : Address -> Call GetInfo
getInfo contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getInfo()" []
    , nonce = Nothing
    , decoder = getInfoDecoder
    }


getInfoDecoder : Decoder GetInfo
getInfoDecoder =
    abiDecode GetInfo
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "isMember(address)" function
-}
isMember : Address -> Address -> Call Bool
isMember contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "isMember(address)" [ AbiEncode.address a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "memberCount()" function
-}
memberCount : Address -> Call BigInt
memberCount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "memberCount()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "members(uint256)" function
-}
members : Address -> BigInt -> Call Address
members contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "members(uint256)" [ AbiEncode.uint a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "propose(address,bytes,uint256)" function
-}
propose : Address -> Address -> Hex -> BigInt -> Call BigInt
propose contractAddress target calldata value =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data =
        Just <|
            AbiEncode.functionCall "propose(address,bytes,uint256)"
                [ AbiEncode.address target
                , AbiEncode.custom "0000000000000000000000000000000000000000000000000000000000000060"
                , AbiEncode.uint value
                , AbiEncode.custom (encodeBytesHelper calldata)
                ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| Hack for the wyoming hackathon
-}
encodeBytesHelper : Hex -> String
encodeBytesHelper bytes =
    let
        rawBytes =
            U.hexToString bytes
                |> remove0x

        charLength =
            String.length rawBytes

        bytesLength =
            charLength // 2

        lengthInHex =
            bytesLength
                |> Hex.toString
                |> String.padLeft 64 '0'

        rightPadAmount =
            (64 - (charLength % 64))
                |> (+) charLength
    in
        lengthInHex ++ (String.padRight rightPadAmount '0' rawBytes)


{-| -}
remove0x : String -> String
remove0x str =
    if String.startsWith "0x" str || String.startsWith "0X" str then
        String.dropLeft 2 str
    else
        str


{-| "quorum()" function
-}
quorum : Address -> Call BigInt
quorum contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "quorum()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "target(uint256)" function
-}
target : Address -> BigInt -> Call Address
target contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "target(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "trigger(uint256)" function
-}
trigger : Address -> BigInt -> Call ()
trigger contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "trigger(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "triggered(uint256)" function
-}
triggered : Address -> BigInt -> Call Bool
triggered contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "triggered(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "value(uint256)" function
-}
value : Address -> BigInt -> Call BigInt
value contractAddress id =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "value(uint256)" [ AbiEncode.uint id ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "window()" function
-}
window : Address -> Call BigInt
window contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "window()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "Confirmed(uint256,address)" event
-}
type alias Confirmed =
    { id : BigInt
    , member : Address
    }


confirmedEvent : Address -> LogFilter
confirmedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Confirmed(uint256,address)" ]
    }


confirmedDecoder : Decoder Confirmed
confirmedDecoder =
    decode Confirmed
        |> custom (data 0 AbiDecode.uint)
        |> custom (data 1 AbiDecode.address)



-- {-| "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)" event
-- -}
-- type alias LogNote =
--     { sig : String
--     , guy : Address
--     , foo : String
--     , bar : String
--     , wad : BigInt
--     , fax : String
--     }
-- logNoteEvent : Address -> Maybe String -> Maybe Address -> Maybe String -> Maybe String -> LogFilter
-- logNoteEvent contractAddress sig guy foo bar =
--     { fromBlock = LatestBlock
--     , toBlock = LatestBlock
--     , address = contractAddress
--     , topics =
--         [ Just <| U.keccak256 "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)"
--         , Maybe.map (abiEncode << AbiEncode.staticBytes manually - enter - length - for - now - sry) sig
--         , Maybe.map (abiEncode << AbiEncode.address) guy
--         , Maybe.map (abiEncode << AbiEncode.staticBytes manually - enter - length - for - now - sry) foo
--         , Maybe.map (abiEncode << AbiEncode.staticBytes manually - enter - length - for - now - sry) bar
--         ]
--     }
-- logNoteDecoder : Decoder LogNote
-- logNoteDecoder =
--     decode LogNote
--         |> custom (topic 1 AbiDecode.staticBytes manually - enter - length - for - now - sry)
--         |> custom (topic 2 AbiDecode.address)
--         |> custom (topic 3 AbiDecode.staticBytes manually - enter - length - for - now - sry)
--         |> custom (topic 4 AbiDecode.staticBytes manually - enter - length - for - now - sry)
--         |> custom (data 0 AbiDecode.uint)
--         |> custom (data 1 AbiDecode.dynamicBytes)


{-| "Proposed(uint256,bytes)" event
-}
type alias Proposed =
    { id : BigInt
    , calldata : String
    }


proposedEvent : Address -> LogFilter
proposedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Proposed(uint256,bytes)" ]
    }


proposedDecoder : Decoder Proposed
proposedDecoder =
    decode Proposed
        |> custom (data 0 AbiDecode.uint)
        |> custom (data 1 AbiDecode.dynamicBytes)


{-| "Triggered(uint256)" event
-}
type alias Triggered =
    { id : BigInt }


triggeredEvent : Address -> LogFilter
triggeredEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Triggered(uint256)" ]
    }


triggeredDecoder : Decoder Triggered
triggeredDecoder =
    decode Triggered
        |> custom (data 0 AbiDecode.uint)
